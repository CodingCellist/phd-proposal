
@article{clarke_model_2008,
	title = {Model Checking – My 27-Year Quest to Overcome the State Explosion Problem},
	doi = {10.1007/978-3-540-89439-1_13},
	abstract = {Model Checking is an automatic veriﬁcation technique for state-transition systems that are ﬁnite-state or that have ﬁnite-state abstractions. In the early 1980’s in a series of joint papers with my graduate students E.A. Emerson and A.P. Sistla, we proposed that Model Checking could be used for verifying concurrent systems and gave algorithms for this purpose. At roughly the same time, Joseph Sifakis and his student J.P. Queille at the University of Grenoble independently developed a similar technique. Model Checking has been used successfully to reason about computer hardware and communication protocols and is beginning to be used for verifying computer software. Speciﬁcations are written in temporal logic, which is particularly valuable for expressing concurrency properties. An intelligent, exhaustive search is used to determine if the speciﬁcation is true or not. If the speciﬁcation is not true, the Model Checker will produce a counterexample execution trace that shows why the speciﬁcation does not hold. This feature is extremely useful for ﬁnding obscure errors in complex systems. The main disadvantage of Model Checking is the state-explosion problem, which can occur if the system under veriﬁcation has many processes or complex data structures. Although the state-explosion problem is inevitable in worst case, over the past 27 years considerable progress has been made on the problem for certain classes of state-transition systems that occur often in practice. In this talk, I will describe what Model Checking is, how it works, and the main techniques that have been developed for combating the state explosion problem.},
	pages = {1},
	author = {Clarke, Edmund M},
	date = {2008},
	langid = {english},
	file = {Clarke - Model Checking – My 27-Year Quest to Overcome the .pdf:/home/thomas/Zotero/storage/Z86K32DR/Clarke - Model Checking – My 27-Year Quest to Overcome the .pdf:application/pdf}
}

@incollection{meyer_model_2012,
	location = {Berlin, Heidelberg},
	title = {Model Checking and the State Explosion Problem},
	volume = {7682},
	isbn = {978-3-642-35745-9 978-3-642-35746-6},
	url = {http://link.springer.com/10.1007/978-3-642-35746-6_1},
	abstract = {Model checking is an automatic veriﬁcation technique for hardware and software systems that are ﬁnite state or have ﬁnite state abstractions. It has been used successfully to verify computer hardware, and it is beginning to be used to verify computer software as well. As the number of state variables in the system increases, the size of the system state space grows exponentially. This is called the “state explosion problem”. Much of the research in model checking over the past 30 years has involved developing techniques for dealing with this problem. In these lecture notes, we will explain how the basic model checking algorithms work and describe some recent approaches to the state explosion problem, with an emphasis on Bounded Model Checking.},
	pages = {1--30},
	booktitle = {Tools for Practical Software Verification},
	publisher = {Springer Berlin Heidelberg},
	author = {Clarke, Edmund M. and Klieber, William and Nováček, Miloš and Zuliani, Paolo},
	editor = {Meyer, Bertrand and Nordio, Martin},
	urldate = {2020-01-15},
	date = {2012},
	langid = {english},
	doi = {10.1007/978-3-642-35746-6_1},
	file = {Clarke et al. - 2012 - Model Checking and the State Explosion Problem.pdf:/home/thomas/Zotero/storage/STV5WW57/Clarke et al. - 2012 - Model Checking and the State Explosion Problem.pdf:application/pdf}
}

@article{demri_parametric_2006,
	title = {A parametric analysis of the state-explosion problem in model checking},
	volume = {72},
	issn = {00220000},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0022000005001297},
	doi = {10.1016/j.jcss.2005.11.003},
	abstract = {In model checking, the state-explosion problem occurs when one checks a nonﬂat system, i.e., a system implicitly described as a synchronized product of elementary subsystems. In this paper, we investigate the complexity of a wide variety of model-checking problems for nonﬂat systems under the light of parameterized complexity, taking the number of synchronized components as a parameter. We provide precise complexity measures (in the parameterized sense) for most of the problems we investigate, and evidence that the results are robust.},
	pages = {547--575},
	number = {4},
	journaltitle = {Journal of Computer and System Sciences},
	shortjournal = {Journal of Computer and System Sciences},
	author = {Demri, S. and Laroussinie, F. and Schnoebelen, Ph.},
	urldate = {2020-01-15},
	date = {2006-06},
	langid = {english},
	file = {Demri et al. - 2006 - A parametric analysis of the state-explosion probl.pdf:/home/thomas/Zotero/storage/LP9IDMTA/Demri et al. - 2006 - A parametric analysis of the state-explosion probl.pdf:application/pdf}
}

@article{kress-gazit_correct_2011,
	title = {Correct, Reactive, High-Level Robot Control},
	volume = {18},
	issn = {1070-9932},
	url = {http://ieeexplore.ieee.org/document/6016593/},
	doi = {10.1109/MRA.2011.942116},
	pages = {65--74},
	number = {3},
	journaltitle = {{IEEE} Robotics \& Automation Magazine},
	shortjournal = {{IEEE} Robot. Automat. Mag.},
	author = {Kress-Gazit, Hadas and Wongpiromsarn, Tichakorn and Topcu, Ufuk},
	urldate = {2020-01-15},
	date = {2011-09},
	langid = {english},
	file = {Kress-Gazit et al. - 2011 - Correct, Reactive, High-Level Robot Control.pdf:/home/thomas/Zotero/storage/EM73H4LN/Kress-Gazit et al. - 2011 - Correct, Reactive, High-Level Robot Control.pdf:application/pdf}
}

@article{stuart_simulation-verification_2001,
	title = {Simulation-verification: biting at the state explosion problem},
	volume = {27},
	issn = {00985589},
	url = {http://ieeexplore.ieee.org/document/935853/},
	doi = {10.1109/32.935853},
	shorttitle = {Simulation-verification},
	abstract = {ÐSimulation and verification are the two conventional techniques for the analysis of specifications of real-time systems. While simulation is relatively inexpensive in terms of execution time, it only validates the behavior of a system for one particular computation path. On the other hand, verification provides guarantees over the entire set of computation paths of a system, but is, in general, very expensive due to the state-space explosion problem. In this paper, we introduce a new technique: Simulation-verification combines the best of both worlds by synthesizing an intermediate analysis method. This method uses simulation to limit the generation of a computation graph to that set of computations consistent with the simulation. This limited computation graph, called a simulationverification graph, can be one or more orders of magnitude smaller than the full computation graph. A tool, {XSVT}, is described which implements simulation-verification graphs. Three paradigms for using the new technique are proposed. The paper illustrates the application of the proposed technique via an example of a robot controller for a manufacturing assembly line.},
	pages = {599--617},
	number = {7},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	shortjournal = {{IIEEE} Trans. Software Eng.},
	author = {Stuart, D.A. and Brockmeyer, M. and Mok, A.K. and Jahanian, F.},
	urldate = {2020-01-15},
	date = {2001-07},
	langid = {english},
	file = {Stuart et al. - 2001 - Simulation-verification biting at the state explo.pdf:/home/thomas/Zotero/storage/XMUIUKJF/Stuart et al. - 2001 - Simulation-verification biting at the state explo.pdf:application/pdf}
}

@inproceedings{yan_sun_verifying_2007,
	location = {Portland, {OR}},
	title = {Verifying Noninterference in a Cyber-Physical System The Advanced Electric Power Grid},
	isbn = {978-0-7695-3035-2},
	url = {http://ieeexplore.ieee.org/document/4385521/},
	doi = {10.1109/QSIC.2007.4385521},
	abstract = {The advanced electric power grid is a complex real-time system having both Cyber and Physical components. While each component may function correctly, independently, their composition may yield incorrectness due to interference. One specific type of interference is in the frequency domain, essentially, violations of the Nyquist rate. The challenge is to encode these signal processing problem characteristics into a form that can be model checked. To verify the correctness of the cyber-physical composition using model-checking techniques requires that a model be constructed that can represent frequency interference. In this paper, {RT}-{PROMELA} was used to construct the model, which was checked in {RT}-{SPIN}. In order to reduce the state explosion problem, the model was decomposed into multiple sub-models, each with a smaller state space that can be checked individually, and then the proofs checked for noninterference. Cooperation among multiple clock variables due to their lack of notion of urgency and their asynchronous interactions, are also addressed.},
	eventtitle = {2007 7th International Conference on Quality Software},
	pages = {363--369},
	booktitle = {Seventh International Conference on Quality Software ({QSIC} 2007)},
	publisher = {{IEEE}},
	author = {{Yan Sun} and McMillin, B. and {Xiaoqing Liu} and Cape, D.},
	urldate = {2020-01-15},
	date = {2007-10},
	langid = {english},
	file = {Yan Sun et al. - 2007 - Verifying Noninterference in a Cyber-Physical Syst.pdf:/home/thomas/Zotero/storage/VHIHF8C8/Yan Sun et al. - 2007 - Verifying Noninterference in a Cyber-Physical Syst.pdf:application/pdf}
}

@incollection{goos_state_1998,
	location = {Berlin, Heidelberg},
	title = {The state explosion problem},
	volume = {1491},
	isbn = {978-3-540-65306-6 978-3-540-49442-3},
	url = {http://link.springer.com/10.1007/3-540-65306-6_21},
	pages = {429--528},
	booktitle = {Lectures on Petri Nets I: Basic Models},
	publisher = {Springer Berlin Heidelberg},
	author = {Valmari, Antti},
	editor = {Reisig, Wolfgang and Rozenberg, Grzegorz},
	editorb = {Goos, Gerhard and Hartmanis, Juris and Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2020-01-15},
	date = {1998},
	langid = {english},
	doi = {10.1007/3-540-65306-6_21},
	file = {Valmari - 1998 - The state explosion problem.pdf:/home/thomas/Zotero/storage/TDTQUDST/Valmari - 1998 - The state explosion problem.pdf:application/pdf}
}

@incollection{goos_progress_2001,
	location = {Berlin, Heidelberg},
	title = {Progress on the State Explosion Problem in Model Checking},
	volume = {2000},
	isbn = {978-3-540-41635-7 978-3-540-44577-7},
	url = {http://link.springer.com/10.1007/3-540-44577-3_12},
	abstract = {Model checking is an automatic veriﬁcation technique for ﬁnite state concurrent systems. In this approach to veriﬁcation, temporal logic speciﬁcations are checked by an exhaustive search of the state space of the concurrent system. Since the size of the state space grows exponentially with the number of processes, model checking techniques based on explicit state enumeration can only handle relatively small examples. This phenomenon is commonly called the ”State Explosion Problem”. Over the past ten years considerable progress has been made on this problem by (1) representing the state space symbolically using {BDDs} and by (2) using abstraction to reduce the size of the state space that must be searched. As a result model checking has been used successfully to ﬁnd extremely subtle errors in hardware controllers and communication protocols. In spite of these successes, however, additional research is needed to handle large designs of industrial complexity. This aim of this paper is to give a succinct survey of symbolic model checking and to introduce the reader to recent advances in abstraction.},
	pages = {176--194},
	booktitle = {Informatics},
	publisher = {Springer Berlin Heidelberg},
	author = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
	editor = {Wilhelm, Reinhard},
	editorb = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2020-01-15},
	date = {2001},
	langid = {english},
	doi = {10.1007/3-540-44577-3_12},
	file = {Clarke et al. - 2001 - Progress on the State Explosion Problem in Model C.pdf:/home/thomas/Zotero/storage/G2MJMCI4/Clarke et al. - 2001 - Progress on the State Explosion Problem in Model C.pdf:application/pdf}
}

@inproceedings{hongwei_xi_facilitating_2003,
	location = {Brisbane, Queensland, Australia},
	title = {Facilitating program verification with dependent types},
	isbn = {978-0-7695-1949-4},
	url = {http://ieeexplore.ieee.org/document/1236209/},
	doi = {10.1109/SEFM.2003.1236209},
	abstract = {The use of types in capturing program invariants is overwhelming in practical programming. The type systems in languages such as {ML} and Java scale convincingly to realistic programs but they are of relatively limited expressive power. In this paper, we show that the use of a restricted form of dependent types can enable us to capture many more program invariants such as memory safety while retaining practical type-checking. The programmer can encode program invariants with type annotations and then verify these invariants through static type-checking. Also the type annotations can serve as informative program documentation, which are mechanically veriﬁed and can thus be fully trusted. We argue with realistic examples that this restricted form of dependent types can signiﬁcantly facilitate program veriﬁcation as well as program documentation.},
	eventtitle = {1st {IEEE} International Conference Software Engineering and Formal Methods. {SEFM}'03},
	pages = {72--81},
	booktitle = {First International Conference {onSoftware} Engineering and Formal Methods, 2003.Proceedings.},
	publisher = {{IEEE}},
	author = {{Hongwei Xi}},
	urldate = {2020-01-15},
	date = {2003},
	langid = {english},
	file = {Hongwei Xi - 2003 - Facilitating program verification with dependent t.pdf:/home/thomas/Zotero/storage/QU9YUR8N/Hongwei Xi - 2003 - Facilitating program verification with dependent t.pdf:application/pdf}
}

@book{brady_type-driven_2017,
	location = {Shelter Island, {NY}},
	title = {Type-driven development with Idris},
	isbn = {978-1-61729-302-3},
	pagetotal = {453},
	publisher = {Manning Publications Co},
	author = {Brady, Edwin},
	date = {2017},
	note = {{OCLC}: ocn950958936},
	keywords = {Functional programming (Computer science), Idris (Computer program language)}
}